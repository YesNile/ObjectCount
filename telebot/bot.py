import telebot
from telebot import types
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP
from ultralytics import YOLO

from database import database_manager as dataBase
from ml.process_image import SegmentationModule

TOKEN = "6273302502:AAGGO3PgrLDwIG9mqwUOU-nSQ3yWuWWVtYw"
bot = telebot.TeleBot(TOKEN)

model = SegmentationModule(r"../best_with_badges.pt")

user_id = 0
res = []
fav = []

@bot.message_handler(commands=['start'])
def start(message):
    dataBase.db_connect(message.from_user.id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    item1 = types.KeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç')
    item2 = types.KeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é')
    item3 = types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—á–µ—Ç')
    item4 = types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é')
    item5 = types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ')
    markup.add(item1, item2, item3, item4, item5)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, {0.first_name}!\n –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –æ–±—ä–µ–∫—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—ã—á–Ω–æ –ª–µ–∂–∞—Ç '
                                      '–Ω–∞ —Ç–≤–æ–µ–º —Å—Ç–æ–ª–µ, –∏ —É–∑–Ω–∞–π —Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –Ω–µ–π '
                                      '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç'.format(message.from_user), reply_markup=markup)

@bot.message_handler(content_types=['text'])
def bot_message(message):
    global user_id
    if message.chat.type == 'private':
        if message.text == '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç':
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url='https://www.google.ru/'))
            bot.reply_to(message, '–ù–∞–∂–º–∏—Ç–µ, –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç', reply_markup=markup)

        elif message.text == '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é':
            bot.send_message(message.chat.id,
                             '–Ø –æ–±—É—á–µ–Ω —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—é –ø–æ—Ä—è–¥–∫–∞ 25 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤. –î–ª—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ '
                             '—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω—É–∂–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –≤ —Ö–æ—Ä–æ—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ, –Ω–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ–º –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ —Ñ–æ–Ω–µ, '
                             '–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Å–Ω–∏–º–∞—Ç—å –±–ª–∏–∑–∫–æ –∫ –æ–±—ä–µ–∫—Ç–∞–º')

        elif message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—á–µ—Ç':
            coin = dataBase.db_score(message.from_user.id)
            bot.send_message(message.chat.id, f'–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ: {coin} –º–æ–Ω–µ—Ç')

        elif message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            item1 = types.KeyboardButton('–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è')
            item2 = types.KeyboardButton('–í–≤–µ—Å—Ç–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ')
            item3 = types.KeyboardButton('–ù–∞–∑–∞–¥')
            markup.add(item1, item2, item3)
            bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–µ—Ç–µ –ø–µ—Ä–∏–æ–¥: ', reply_markup=markup)

        elif message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ':
            fav.clear()
            user_id = message.from_user.id

            history = dataBase.db_favourites_view(message.from_user.id)
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton('–°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ .zip', callback_data='save'))
            markup.add(types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ', callback_data='delete'))
            for mes in history:
                photo_lsd = open(mes[1], 'rb')
                fav_mes = bot.send_photo(message.chat.id, photo_lsd, mes[0], reply_markup=markup)
                fav.append(fav_mes.message_id)

        elif message.text == '–ù–∞–∑–∞–¥':
            dataBase.db_connect(message.from_user.id)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            item1 = types.KeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç')
            item2 = types.KeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é')
            item3 = types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—á–µ—Ç')
            item4 = types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é')
            item5 = types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ')
            markup.add(item1, item2, item3, item4, item5)
            bot.send_message(message.chat.id, '–ü—Ä–æ–¥–æ–ª–∂–∏–º', reply_markup=markup)
            res.clear()

        elif message.text == '–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è':
            history = dataBase.db_history_allview(message.from_user.id)
            bot.send_message(message.chat.id, '–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è')
            for mes in history:
                photo_lsd = open(mes[1], 'rb')
                bot.send_photo(message.chat.id, photo_lsd, f'–°–æ–æ–±—â–µ–Ω–∏–µ: {mes[0]}')

        elif message.text == '–í–≤–µ—Å—Ç–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ':
            res.clear()
            calendar, step = DetailedTelegramCalendar().build()
            bot.send_message(message.chat.id, f"Select {LSTEP[step]}", reply_markup=calendar)
            user_id = message.from_user.id


@bot.callback_query_handler(func=DetailedTelegramCalendar.func())
def cal(c):
    result, key, step = DetailedTelegramCalendar().process(c.data)
    if not result and key:
        bot.edit_message_text(f"Select {LSTEP[step]}",
                              c.message.chat.id,
                              c.message.message_id,
                              reply_markup=key)
    elif result:
        bot.edit_message_text(f"You selected {result}",
                              c.message.chat.id,
                              c.message.message_id)
        res.append(result)
        if len(res) == 1:
            calendar, step = DetailedTelegramCalendar().build()
            bot.send_message(c.message.chat.id,
                             f"Select {LSTEP[step]}",
                             reply_markup=calendar)
    if len(res) == 2:
        history = dataBase.db_history_view(user_id, res)
        bot.send_message(c.message.chat.id, '–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è')
        for mess in history:
            photo_lsd = open(mess[1], 'rb')
            bot.send_photo(c.message.chat.id, photo_lsd, f'–°–æ–æ–±—â–µ–Ω–∏–µ: {mess[0]}')
            res.clear()


@bot.message_handler(content_types=['photo'])
def get_photo(message):
    markup = types.InlineKeyboardMarkup()
    if dataBase.db_coins(message.from_user.id):

        item1 = types.InlineKeyboardButton('–°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ .zip', callback_data='save')
        item2 = types.InlineKeyboardButton('üëç', callback_data='like')
        item3 = types.InlineKeyboardButton('üëé', callback_data='dislike')
        item4 = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', callback_data='favourites')
        markup.row(item2, item3)
        markup.add(item1)
        markup.add(item4)

        photo_id = message.photo[-1].file_id
        file_info = bot.get_file(photo_id)
        file_path = file_info.file_path
        downloaded_file = bot.download_file(file_path)
        image_path = fr"../images/{photo_id}.jpg"

        with open(image_path, 'wb') as file:
            file.write(downloaded_file)
        segmented_images = model.segment_image(image_path, model, photo_id)

        photo_lsd = open(image_path, 'rb')
        msg = bot.send_photo(message.chat.id, photo_lsd, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {len(segmented_images)}", reply_markup=markup)
        dataBase.db_history_save(msg.id, message.from_user.id, image_path, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {len(segmented_images)}")
    else:
        markup.add(types.InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É', url='https://t.me/Jiraffeck'))
        bot.send_message(message.chat.id, '–£–ø—Å! –í–∞—à –ª–∏–º–∏—Ç –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞.',
                         reply_markup=markup)


@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    global user_id
    image = dataBase.db_message_photo(callback.message.message_id)
    if callback.message:
        if callback.data == 'save':
            if image:
                file = open(fr"{image[0][1].split('.')[0]}.zip", 'rb')
            else:
                history = dataBase.db_favourites_view(user_id)
                i = fav.index(callback.message.message_id)
                file = open(fr"{history[i][1].split('.')[0]}.zip", 'rb')
            bot.send_document(callback.message.chat.id, file)

        elif callback.data == 'favourites':
            dataBase.db_favourites_update(True, image[0][1])
            bot.send_message(callback.message.chat.id, '–î–æ–±–∞–≤–ª–µ–Ω–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.')

        elif callback.data == 'delete':
            history = dataBase.db_favourites_view(user_id)
            i = fav.index(callback.message.message_id)
            fav.remove(fav[i])
            dataBase.db_favourites_update(False, history[i][1])
            bot.delete_message(callback.message.chat.id, callback.message.message_id)
            bot.send_message(callback.message.chat.id, '–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.')

        if image:
            if image[0][2] is None:
                if callback.data == 'like':
                    dataBase.db_estimation(True, callback.message.message_id)
                    bot.send_message(callback.message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≥–æ–ª–æ—Å!')

                elif callback.data == 'dislike':
                    dataBase.db_estimation(False, callback.message.message_id)
                    bot.send_message(callback.message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≥–æ–ª–æ—Å! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–∏–º –≤—Å–µ –Ω–µ–¥–æ—á–µ—Ç—ã –≤ –±—É–¥—É—â–µ–º!')




bot.polling(none_stop=True)